# shellcheck disable=SC2148
# for setting history length see HISTSIZE and HISTFILESIZE in bash or zsh
HISTSIZE=10000
HISTFILESIZE=20000

# make less more friendly for non-text input files, see lesspipe(1)
if [[ -x $(command -v lesspipe.sh) ]]; then
  export LESSOPEN="|/usr/bin/lesspipe.sh %s"
elif [[ -x $(command -v lesspipe) ]]; then
  eval "$(SHELL=/bin/sh lesspipe)"
elif [[ -f "$HOME/.lessfilter" ]]; then
  export LESSOPEN="|$HOME/.lessfilter %s"
fi
export LESS=' -RN'

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

### Add color to man
if [[ -f $(command -v most) ]]; then
  MOST_PATH=$(command -v most)
  export MANPAGER="$MOST_PATH -s"
fi

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Add bin and .local/bin to PATH
[[ -s "$HOME/bin" ]] && export PATH="$HOME/bin:$PATH"
[[ -s "$HOME/.local/bin" ]] && export PATH="$HOME/.local/bin:$PATH"

# Add RVM to PATH for scripting.
# Make sure this is the last PATH variable change.
[[ -s "$HOME/.rvm/bin" ]] && export PATH="$PATH:$HOME/.rvm/bin"

# Add completion for RVM
export rvm_path="$HOME/.rvm"
# shellcheck disable=SC1090
[[ -r "$rvm_path/scripts/completion" ]] && . "$rvm_path/scripts/completion"
# Make RVM a function
# shellcheck disable=SC1090
[[ -r "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

### adb-fastboot for android devices
[[ -d "$HOME/bin/adb-fastboot/" ]] && export PATH="$HOME/bin/adb-fastboot/:$PATH"

### Add Rust Cargo to path
[[ -s "$HOME/.cargo/bin" ]] && export PATH="$HOME/.cargo/bin:$PATH"

#############################
##### Aliases & Helpers #####
#############################
alias weekNumber='date +%V'
alias wn='weekNumber'

alias ls='ls -AFv --color=tty'
alias lsa='ls -AFlhv --color=tty'
alias ll='ls -alFv'
alias la='ls -AFv'
alias l='ls -CFv'
alias ln="ln -v"
alias mkdir="mkdir -p"
alias df='df -hT --exclude-type=tmpfs --exclude-type=devtmpfs'
alias du='du -h'
alias free='free -h'
alias boot.log='journalctl -b'
alias dev='cd $HOME/Documents/Dev*/'
alias blog='cd $HOME/Documents/Dev*/sfeuga.com/blog.sfeuga.com/'
alias dotfiles='cd $HOME/.dotfiles/'
alias path='echo $PATH | tr -s ":" "\n"'
alias rvm-global-install='for l in $(cat $HOME/.rvm/gemsets/global.gems); do rvm @global do gem install $l; done'

# cheat settings
if [[ -x $(command -v cheat) ]]; then
  export CHEAT_COLORS=true
  export CHEAT_COLORSCHEME=dark

  function _cheat_autocomplete {
    sheets=$(cheat -l | cut -d' ' -f1)
    COMPREPLY=()
    if [[ "$COMP_CWORD" = 1 ]]; then
      IFS=" " read -r -a COMPREPLY <<< "$(compgen -W "$sheets" -- "$2")"
    fi
  }

  complete -F _cheat_autocomplete cheat
fi

# Easy DL
if [[ -f $(command -v aria2c) ]]; then
  alias tdl='aria2c --seed-time=0'
fi
if [[ -f $(command -v youtube-dl) ]]; then
  alias ytdl="youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'"
fi

# Setup movies filder name for handy ytdl
if [[ -d $HOME/Movies ]]; then
  export movie_folder=Movies
elif [[ -d $HOME/Videos ]]; then
  export movie_folder=Videos
fi

### System maintenance
if [[ -f $(command -v dnf) ]]; then
  alias sys-update='sudo dnf update -y && sudo dnf autoremove -y && flatpak update -y'
elif [[ -f $(command -v apt) ]]; then
  alias sys-update='sudo apt update -y && sudo apt upgrade -y && sudo apt autoremove -y && flatpak update -y'
fi

### Buku https://github.com/jarun/Buku
if [[ -f $(command -v buku) ]]; then
  # Buku Completion
  if [[ -f $HOME/bin/buku-completion.bash ]]; then
# shellcheck source=/dev/null
    source "$HOME/bin/buku-completion.bash"
  else
    BUKU='https://raw.githubusercontent.com/jarun/Buku/master'
    curl $BUKU/auto-completion/bash/buku-completion.bash \
      -o "$HOME/bin/buku-completion.bash"
# shellcheck source=/dev/null
    source "$HOME/bin/buku-completion.bash"
  fi
fi


# Change all current files/folders to Title Case
#function to_title_case {
#  rename 'y/A-Z/a-z/' -- *
#  rename 's/(^|[\s_-])([a-z])/$1\u$2/g' -- *
#}

# Convert mkv titile to match file name
function mkvtitle() {
  if [[ -f "$(command -v mkvpropedit)" ]]; then
    if [[ "$#" -gt "0" ]]; then
      mkvpropedit "$1" -e info -s title="${f//\.mkv/}"
      return
    else
      for f in *.mkv; do
        mkvpropedit "$f" -e info -s title="${f//\.mkv/}"
      done
      return
    fi
  else
    echo "Please, install mkvtoolnix"
    return 1
  fi
}

### Git
if [[ -f $(command -v git) ]]; then
  # Git Completion
  if [[ -f $HOME/bin/git-completion.bash ]]; then
# shellcheck source=/dev/null
    source "$HOME/bin/git-completion.bash"
  else
    GIT_COMPLETION='https://raw.githubusercontent.com/git/git/master/contrib'
    curl $GIT_COMPLETION/completion/git-completion.bash \
      -o "$HOME/bin/git-completion.bash"
# shellcheck source=/dev/null
    source "$HOME/bin/git-completion.bash"
  fi

  alias got='git '
  alias gti='git '
  alias gut='git '

  function LastCommitNumber () {
    [[ -d .git ]] && git log -n 1 | head -n 1 | awk '{ print $NF }'
  }

  function UntouchedSinceALongTimeBranch () {
    [[ -d .git ]] && \
      # Local and Remote branch
      for branch in $(git branch -a | sed 's/\*/ /g' | \
                      awk '{ print $1 }' | grep -E -v -w 'HEAD|master')
      do
        echo -e "$(git show --format="%cr" "$branch" | head -n 1) \
                \t$branch" | grep -E 'month[s]*|year[s]*'
      done | awk '{ print $NF }' | sed 's|origin/||'
  }

  function CleanBranch () {
    [[ -d .git ]] && \
      branches=$(git remote prune origin --dry-run | grep 'origin/' | \
                 awk -F '/' '{ print $2 }')
    if [[ -n "$branches" ]]; then
      echo "$branches"
      echo -n "Did you want to clean all this branches (y|N):"
      read -r yn
      case $yn in
        [yY] | [yY][Ee][Ss])
          # Local and Remote branch
          git remote prune origin
          git branch -D "$(for branch in $branches; do
                             printf "%s " "$branch"
                           done;)" 2> /dev/null
          ;;
        *)
          exit 1
          ;;
      esac
    else
      echo "There is no branch to clean."
    fi
  }

  function DeleteUnusedBranch () {
    CleanBranch
    git push origin "$(UntouchedSinceALongTimeBranch)" --delete --dry-run
    echo -n "Did you want to delete all this remote branches (y|N):"
    read -r yn
    case $yn in
      [yY] | [yY][Ee][Ss])
        git push origin "$(UntouchedSinceALongTimeBranch)" --delete
        ;;
      *)
        exit 1
        ;;
    esac
  }

  function GetBackToWork () {
    local last_git_commit_message_first_word=''
    local number_of_commit=''

    last_git_commit_message_first_word="$(git log --pretty=oneline -n 1 | awk '{ print $2 }')"
    number_of_commit=$(git log --pretty=oneline | wc -l)

    if [[ "$last_git_commit_message_first_word" =~ "WIP" ]]; then
      if [[ "$number_of_commit" -gt 1 ]]; then
        cd "$(git rev-parse --show-toplevel)" && git pull --all
        git reset --soft HEAD~1 && git unstage
      else
        true
      fi
    else
      echo 'The last commit on this branch was not a "Work In Progress".'
    fi
  }
fi

### Docker & Docker-compose
if [[ -f $(command -v docker) ]]; then
  alias docAllStop='docker stop $(ActiveContainerIds)'
  alias docRedisCli='docker exec -it $(redisContainerId) redis-cli'
  alias docSidekiqLogs='docker logs -f $(sidekiqContainerId)'
  alias restartSidekiqContainer='cId=$(sidekiqContainerId) && docker stop $cId && docker start $cId'

  if [[ -f $(command -v docker-compose) ]]; then
    alias doc='docker-compose '
    alias docDev='doc -f $(find . -iname *dev.yml)'
    alias docDevRun='docdev run --rm '
    alias docDevUp='docdev up'
    alias docRun='doc run --rm '
    alias docUp='doc up'
  fi

  function ActiveContainerIds () {
    docker ps | grep -v CONTAINER | awk 'BEGIN { ORS=" " }; { print $1 }'
  }

  function ActiveContainerNames () {
    docker ps | grep -v CONTAINER | awk 'BEGIN { ORS=" " }; { print $NF }'
  }

  function redisContainerId () {
    docker ps | grep -m 1 redis | awk '{ print $NF }'
  }

  function sidekiqContainerId () {
    docker ps | grep -m 1 sidekiq | awk '{ print $NF }'
  }
fi

### Ruby
#MyFiles="git status -s | awk '{ print $NF }' | grep .rb"
#MyFilesAfterCommit="git diff-tree --no-commit-id --name-only -r \
#                   $(LastCommitNumber) | grep .rb"

#function RubocopMyFiles () {
#  echo 'Rubocop:'
#  for file in $(eval "$MyFiles"); do
#    echo -e "\n$file: "
#    rubocop "$file"
#  done
#  echo "---------------------------"
#}

#function RubocopAfterCommit () {
#  LastCommitNumber
#  echo 'Rubocop:'
#  for file in $(eval "$MyFilesAfterCommit"); do
#    echo -e "\n$file: "
#    rubocop "$file"
#  done
#  echo "---------------------------"
#}

#function ReekMyFiles () {
#  echo 'Reek:'
#  for file in $(eval "$MyFiles"); do
#    echo -e "\n$file: "
#    reek "$file"
#  done
#  echo "---------------------------"
#}

#function ReekAfterCommit () {
#  LastCommitNumber
#  echo 'Reek:'
#  for file in $(eval "$MyFilesAfterCommit"); do
#    echo -e "\n$file: "
#    reek "$file"
#  done
#  echo "---------------------------"
#}

### Heroku
#
# TODO check if heroku toolbelt is installed
# .heroku_projects example:
#   an heroku app name
#   another heroku app name
#   a third heroku app name
function GetLastCredentials () {
  if [[ -f "$HOME/.heroku_projects" ]]; then
    "$HOME/.heroku_projects" | while IFS= read -r heroku_project
    do
      echo "/tmp/$heroku_project.env" && \
      heroku config --app "$heroku_project" --shell > /tmp/"$heroku_project.env"
    done
  else
    echo -e "Please add Heroku Project Name in ~/.heroku_projects.\n\tOne project name per line."
  fi
}

### Ledger
if [[ -f $(command -v ledger) ]] && \
   [[ -d $HOME/Documents/Administratif/Banques/ledger ]] && \
   [[ -f "$HOME/.ledgerrc" ]]; then
  function LedgerNewEntry () {
    (
      cd "$HOME/Documents/Administratif/Banques/ledger/" || exit 1
      vim "$(date +"%Y-%m").journal"
    )
  }
  alias ledgerAccountStatus='ledger bal -X JPY'
  alias ledgerCurrentMonthAccountStatus='ledger bal -X JPY --period $(date +"%Y-%m")'
  alias ledgerNewEntry='LedgerNewEntry'
fi

# Flatpak app aliases
if [[ -f "$HOME/.local/share/flatpak/exports/share/applications/com.sublimetext.three.desktop" ]]; then
  function sublime() {
    flatpak run com.sublimetext.three "$@"
  }
fi
if [[ -f "$HOME/.local/share/flatpak/exports/share/applications/org.videolan.VLC" ]]; then
  function vlc() {
    flatpak run org.videolan.VLC "$@"
  }
fi

# Vim folders in case of not using nvim
if [[ -f $(command -v vim) ]] && [[ ! -f $(command -v nvim) ]]; then
  mkdir -p "$HOME"/.vim/{backup,bundle,spell,swap,undo}
fi

# Get Session Type
function get_session_number () {
  loginctl | awk '{print $1}' | head -n 2 | tail -n 1
}
alias get_session_type='loginctl show-session $(get_session_number) -p Type'

# Edit Radio List
alias radio_edit='$EDITOR Music/Radio\ France.m3u8 /home/sfeuga/.gse-radio/channelList.json'

# Translate aliases
if [[ -f $(command -v trans) ]]; then
  alias trans_en='trans en:fr+ja'
  alias trans_fr='trans fr:en+ja'
  alias trans_jp='trans ja:en+fr'
fi

# If no file(s) are passed to vim, check if a Session.vim exist, if yes, run it
function vim_session() {
  if [[ -f "Session.vim" ]]; then
    if [[ "$#" -gt 1 ]]; then
      editor=$1
      shift
      $editor "$@"
    else
      editor=$1
      shift
      $editor -S
    fi
  else
    editor=$1
    shift
    $editor "$@"
  fi
}

# Overide Default editor
if [[ -f $(command -v nvim) ]]; then
  alias vim='vim_session nvim'
  if [[ -n "$NVIM_LISTEN_ADDRESS" ]]; then
    if [[ -f $(command -v nvr) ]]; then
      export EDITOR="nvr -cc split --remote-wait +'set bufhidden=wipe'"
    else
      echo -e "Please install neovim-remote by running the following command:\n" \
        "\tFor Fedora:\tsudo dnf install python3-devel && " \
          "pip3 install --user neovim-remote\n" \
        "\tFor Ubuntu:\tsudo apt install python3-dev && " \
          "pip3 install --user neovim-remote"
    fi
  else
    export EDITOR='nvim'
  fi
  if [[ -f "$HOME/.dotfiles/config/nvim/init.vim" ]] && [[ ! -h "$HOME/.config/nvim/init.vim" ]]; then
    if [[ -f $(command -v rcup) ]]; then
      rcup
    fi
  elif [[ -f "$HOME/.dotfiles/config/nvim/init.vim" ]] && [[ -h "$HOME/.config/nvim/init.vim" ]]; then
    alias vimconf='nvim $HOME/.dotfiles/config/nvim/init.vim'
  fi
  if [[ ! -f "$HOME/.local/share/nvim/site/autoload/plug.vim" ]]; then
    curl -fLo "$HOME/.local/share/nvim/site/autoload/plug.vim" --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    nvim +PlugInstall
  fi
elif [[ -f $(command -v vim) ]] && [[ -f "$HOME/.vimrc" ]]; then
  alias vim='vim_session vim'
  alias vimconf='vim $HOME/.vimrc'
  if [[ ! -f "$HOME/.vim/bundle/Vundle.vim" ]]; then
    mkdir -p "$HOME/.vim/bundle"
    git clone https://github.com/VundleVim/Vundle.vim.git "$HOME/.vim/bundle/Vundle.vim"
    vim +PluginInstall +qall
  fi
else
  export EDITOR='vi'
fi

# Easy install my ".desktop" files
alias add_my_desktop_files='mkdir -p $HOME/.local/share/applications/ && cp -vf $HOME/bin/Desktop\ files/* $HOME/.local/share/applications/'

# Easy install my "Argos" files
if [[ -f "$HOME/.local/share/gnome-shell/extensions/argos@pew.worldwidemann.com" ]]; then
  alias add_my_argos_files='mkdir -p $HOME/.config/argos && cp -vf $HOME/bin/argos/* $HOME/.config/argos'
fi

# Easy Source shell rc file
if [[ "$0" == "bash" ]]; then
  alias shellrc='source $HOME/.bashrc'
elif [[ "$0" == "zsh" ]]; then
  alias shellrc='source $HOME/.zshrc'
fi

# Create a default Ruby project
# Usage: mkdefault [type] "project name"
#   If [type] not provide, default create only folder and .gitignore
#   TODO implement optional [type]
#     type available: go, rust, c, c++, perl, python, elixir
function mkdefault() {
  RUBY_VERSION=$(ruby -v | awk '{print $2}' | awk -F 'p' '{print $1}')
  RUBY_BASE_VERSION="${RUBY_VERSION::-1}0"

read -r -d '' HELP << EOF
Usage:
  mkdefault "project name"

EOF

read -r -d '' GEMFILE_CONTENT << EOF
source "https://rubygems.org"

ruby '~> $RUBY_BASE_VERSION'

group :development, :test do
  gem 'reek'
  gem 'rubocop'
  gem 'rubocop-performance'
  gem 'rspec'
  gem 'emoji-rspec'
end

EOF

read -r -d '' RSPEC_CONTENT << EOF
--require emoji-rspec --format adventure

EOF

read -r -d '' RUBOCOP_CONTENT << EOF
require:
  - rubocop-performance

EOF

  if [[ "$#" -gt "1" ]]; then
    echo "$HELP"
  else
    mkdir -p ./"$1"
    (
      cd ./"$1" || return
      echo "$RUBY_VERSION" > .ruby-version
      echo "$1" > .ruby-gemset
      echo "$RUBOCOP_CONTENT" > .rubocop.yml
      echo "$GEMFILE_CONTENT" > Gemfile
      echo $"$RSPEC_CONTENT" > .rspec
      gitignore --default
      gitignore ruby

    )
  fi
}

##############################################
### Do not put other lines after this code ###
##############################################

# Clean path
clean_path=$(echo "$PATH" | tr -s ':' '\n' | sort -u | tr '\n' ':' | rev | cut -c 2- | rev)
export PATH="$clean_path"
