# shellcheck disable=SC2148
# for setting history length see HISTSIZE and HISTFILESIZE in bash or zsh
HISTSIZE=1000000
HISTFILESIZE=1000000
#HISTIGNORE="&:[ \t]*:ls:ls *:cd:cd *:history:history *:rm:rm *:ps:ps *"
HISTIGNORE="&:[ \t]*:history:history *:rm:ps:ps *:less:less *:cat:cat *:most:most *"
HISTIGNORE+=":cheat *:man *:head *:tail *:locate *"
HISTIGNORE+=":pwd:[fb]g:exit:clear:reset:df:du:free:top:htop:sudo updatedb"
HISTTIMEFORMAT="%Y%m%d %T "
#HISTCONTROL=ignoreboth:erasedups:ignoredups:ignorespace:histappend
# Append history on every command
shopt -s histappend
PROMPT_COMMAND="history -a;$PROMPT_COMMAND"

### Easy source local shell config file
# Define if I run Bash or Zsh
if [[ "$0" =~ "bash" ]]; then
  shell_type='bash'
  alias shellrc='source $HOME/.bashrc'
elif [[ "$0" =~ "zsh" ]]; then
  shell_type='zsh'
  alias shellrc='source $HOME/.zshrc'
fi

# Make less more friendly for non-text input files, see lesspipe(1)
if [[ -x $(command -v lesspipe.sh) ]]; then
  export LESSOPEN="|/usr/bin/lesspipe.sh %s"
elif [[ -x $(command -v lesspipe) ]]; then
  eval "$(SHELL=/bin/sh lesspipe)"
elif [[ -f "$HOME/.lessfilter" ]]; then
  export LESSOPEN="|$HOME/.lessfilter %s"
fi
export LESS=' -RN'

# Colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

### Add color to man
if [[ -f $(command -v most) ]]; then
  MOST_PATH=$(command -v most)
  export MANPAGER="$MOST_PATH -s"
fi

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Add bin and .local/bin to PATH
[[ -s "$HOME/bin" ]] && export PATH="$HOME/bin:$PATH"
[[ -s "$HOME/.local/bin" ]] && export PATH="$HOME/.local/bin:$PATH"

# Add RVM to PATH for scripting.
#   Make sure this is the last PATH variable change.
[[ -s "$HOME/.rvm/bin" ]] && export PATH="$PATH:$HOME/.rvm/bin"

# Add completion for RVM
export rvm_path="$HOME/.rvm"
# shellcheck disable=SC1090
[[ -r "$rvm_path/scripts/completion" ]] && . "$rvm_path/scripts/completion"
# Make RVM a function
# shellcheck disable=SC1090
[[ -r "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

### adb-fastboot for android devices
[[ -d "$HOME/bin/adb-fastboot/" ]] && export PATH="$HOME/bin/adb-fastboot/:$PATH"

### Add Rust Cargo to path
[[ -s "$HOME/.cargo/bin" ]] && export PATH="$HOME/.cargo/bin:$PATH"

#############################
##### Aliases & Helpers #####
#############################
# Setup movies filder name for handy ytdl
if [[ -d $HOME/Movies ]]; then
  export movie_folder=Movies
elif [[ -d $HOME/Videos ]]; then
  export movie_folder=Videos
fi

### Aliases
alias Date='date +"%Y/%m/%d %V %H:%M:%S"'
alias boot.log='journalctl -b'
alias df='df -hT --exclude-type=tmpfs --exclude-type=devtmpfs'
alias du='du -h'
alias free='free -h'
alias l='ls -CFv'
alias la='ls -AFv'
alias ll='ls -alFv'
alias ln='ln -v'
alias ls='ls -ACF --color=tty'
alias lsa='ls -AFlhv --color=tty'
alias mkdir='mkdir -p'
alias path='echo $PATH | tr -s ":" "\n"'
alias wget='wget -c'

alias Blog='Dev && cd /sf*/blog*/'
alias Dev='cd $HOME/Doc*/Dev*/'
alias Dotfiles='cd $HOME/.dot*/'
alias Rails='Dev && cd rails/'

# Easy DL
if [[ -f $(command -v aria2c) ]]; then
  alias tdl='aria2c --seed-time=0'
fi
if [[ -f $(command -v youtube-dl) ]]; then
  alias ytdl="youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'"
fi

# Easy install my ".desktop" files
alias add_my_desktop_files='mkdir -p $HOME/.local/share/applications/ && cp -vf $HOME/bin/Desktop*/* $HOME/.l*/s*/app*/'

# Easy install my fonts
alias add_my_fonts='mkdir -p $HOME/.local/share/fonts && cp -vf $HOME/bin/fonts/* $HOME/.l*/s*/fonts/ && sudo fc-cache -f'

# Easy install my "Argos" files
if [[ -f "$HOME/.local/share/gnome-shell/extensions/argos@pew.worldwidemann.com" ]]; then
  alias add_my_argos_files='mkdir -p $HOME/.config/argos && cp -vf $HOME/bin/argos/* $HOME/.config/argos'
fi

### Backups
# TODO Change this to handle path and options and config file
alias backup_data_checksum='rsync -vcaruz --progress --exclude="lost+found" --exclude=".Trash-1000" /mnt/datas/ /run/media/sfeuga/10Tb\ -\ Backup/'
alias backup_home_checksum='rsync -vcaruz --progress --exclude="lost+found" --exclude=".Trash-1000" --exclude="$HOME/Music" --exclude="$HOME/Videos" $HOME /run/media/sfeuga/10Tb\ -\ Backup/'
alias backup_data='rsync -varuz --progress --exclude="lost+found" --exclude=".Trash-1000" /mnt/datas/ /run/media/sfeuga/10Tb\ -\ Backup/'
alias backup_home='rsync -varuz --progress --exclude="lost+found" --exclude=".Trash-1000" --exclude="$HOME/Music" --exclude="$HOME/Videos" $HOME /run/media/sfeuga/10Tb\ -\ Backup/'

# Edit Radio List
alias radio_edit='$EDITOR Music/Radio\ France.m3u8 /home/sfeuga/.gse-radio/channelList.json'

# Translate aliases
if [[ -f $(command -v trans) ]]; then
  alias trans_en='trans en:fr+ja'
  alias trans_fr='trans fr:en+ja'
  alias trans_jp='trans ja:en+fr'
fi

# Get Session Type
function get_session_number () {
  loginctl | awk '{print $1}' | head -n 2 | tail -n 1
}
alias get_session_type='loginctl show-session $(get_session_number) -p Type'

### System maintenance
if [[ -f $(command -v dnf) ]] && [[ -f $(command -v flatpak) ]] && [[ -f $(command -v fwupdmgr) ]]; then
  alias sys-update='sudo dnf update -y && sudo dnf autoremove -y && flatpak update -y && fwupdmgr update'
elif [[ -f $(command -v dnf) ]] && [[ -f $(command -v flatpak) ]]; then
  alias sys-update='sudo dnf update -y && sudo dnf autoremove -y && flatpak update -y'
elif [[ -f $(command -v dnf) ]] && [[ -f $(command -v fwupdmgr) ]]; then
  alias sys-update='sudo dnf update -y && sudo dnf autoremove -y && fwupdmgr update'
elif [[ -f $(command -v dnf) ]]; then
  alias sys-update='sudo dnf update -y && sudo dnf autoremove -y'
elif [[ -f $(command -v apt) ]] && [[ -f $(command -v flatpak) ]] && [[ -f $(command -v fwupdmgr) ]]; then
  alias sys-update='sudo apt update -y && sudo apt upgrade -y && sudo apt autoremove -y && flatpak update -y && fwupdmgr update'
elif [[ -f $(command -v apt) ]] && [[ -f $(command -v flatpak) ]]; then
  alias sys-update='sudo apt update -y && sudo apt upgrade -y && sudo apt autoremove -y && flatpak update -y'
elif [[ -f $(command -v apt) ]] && [[ -f $(command -v fwupdmgr) ]]; then
  alias sys-update='sudo apt update -y && sudo apt upgrade -y && sudo apt autoremove -y && fwupdmgr update'
elif [[ -f $(command -v apt) ]]; then
  alias sys-update='sudo apt update -y && sudo apt upgrade -y && sudo apt autoremove -y'
fi

### Serve command
function serve() {
  # Check if a server is already running
  is_running=$(nc -z localhost 3000; echo $?)
  if [[ "$is_running" == 0 ]]; then
    echo "A server is already running on port 3000."
    return 1
  fi

  # Determine if it's Rails or Jekyllrb to start
  if [[ -f "Gemfile" ]]; then
    project_type=$(grep -s -E "^gem .?rails.?|^gem .?jekyll.?" Gemfile | awk '{print $2}' | sed 's/,//' | sed 's/"//g' | sed "s/'//g")
  else
    project_type=''
  fi

  # Change Terminal Tab title
  if [[ "$project_type" ]] && [[ "$KONSOLE_VERSION" ]]; then
    echo "$project_type detected"
    echo -ne "\033]30;${project_type^} Server\007"
  elif [[ "$project_type" ]] && [[ "$GNOME_TERMINAL_SERVICE" ]]; then
    echo "$project_type detected"
    printf "\e]2;%s\a" "${project_type^} Server"
  fi

  # Finally start the server
  case "$project_type" in
    rails )
      rails server -p 3000 && echo -ne "\033]30;%d : %n\007"
      ;;
    jekyll )
      jekyll serve --port 3000 --livereload && echo -ne "\033]30;%d : %n\007"
      ;;
    * )
      echo "There is no service to start."
      ;;
  esac
}

### Set tab title in gnome terminal
function set-title() {
  if [[ -z "$ORIG" ]]; then
    ORIG=$PS1
  fi
  TITLE="\[\e]2;$*\a\]"
  PS1=${ORIG}${TITLE}
}

### cheat settings
if [[ -x $(command -v cheat) ]]; then
  export CHEAT_COLORS=true
  export CHEAT_COLORSCHEME=dark

  function _cheat_autocomplete {
    local sheets
    sheets=$(cheat -l | cut -d' ' -f1)
    COMPREPLY=()
    if [[ "$COMP_CWORD" = 1 ]]; then
      IFS=" " read -r -a COMPREPLY <<< "$(compgen -W "$sheets" -- "$2")"
    fi
  }

  complete -F _cheat_autocomplete cheat
fi

### Buku https://github.com/jarun/Buku
if [[ -f $(command -v buku) ]]; then
  # Buku Completion
  if [[ "$shell_type" == "bash" ]]; then
    if [[ -f $HOME/bin/buku-completion.bash ]]; then
      # shellcheck source=/dev/null
      source "$HOME/bin/buku-completion.bash"
    else
      BUKU='https://raw.githubusercontent.com/jarun/Buku/master'
      curl $BUKU/auto-completion/bash/buku-completion.bash \
        -o "$HOME/bin/buku-completion.bash"
      # shellcheck source=/dev/null
      source "$HOME/bin/buku-completion.bash"
    fi
  elif [[ "$shell_type" == "zsh" ]]; then
    if [[ -f $HOME/bin/_buku ]]; then
      # shellcheck source=/dev/null
      source "$HOME/bin/_buku"
    else
      BUKU='https://raw.githubusercontent.com/jarun/Buku/master'
      curl $BUKU/auto-completion/zsh/_buku \
        -o "$HOME/bin/_buku"
      # shellcheck source=/dev/null
      source "$HOME/bin/_buku"
    fi
  fi
fi

# Global Gem manager
function rvm_global_gem() {
  read -r -d '' HELP << EOF
Usage: rvm_global_gem [OPTION]... [GEM_NAME]...
Manage Global Gem list

  -a, --add gem_name\tadd following gem filename to global list
  -i, --install\t\tinstall all global gems
  -l, --list\t\tlist all global gems
      --help\t\tdisplay this message

Examples:
  rvm_global_gem -l\t\tlist all global gem
  rvm_global_gem -a pry\t\tadd pry gem filename to global list
EOF

  if [[ "$#" -gt "2" ]]; then
    echo -e "$HELP"
    return 1
  fi
  case $1 in
    --add | -a)
      echo "$2" >> "$HOME/.rvm/gemsets/global.gems"
      return 0
      ;;
    --install | -i)
      rvm_global_gem_install="rvm @global do gem install $(cat $HOME/.rvm/gemsets/global.gems | sort -u | tr '\n' ' ')"
      $rvm_global_gem_install
      return 0
      ;;
    --list | -l)
      cat "$HOME/.rvm/gemsets/global.gems" | sort -u
      return 0
      ;;
    --help)
      echo -e "$HELP"
      return 0
      ;;
    *)
      echo -e "$1 is not a valid option.\n"
      echo -e "$HELP"
      return 1
      ;;
  esac
}

# Change all current files/folders to Title Case
function to_title_case {
  if [[ -f "$(command -v rename)" ]]; then
    if [[ "$#" -gt "0" ]]; then
      rename 'y/A-Z/a-z/' -- "$1"
      rename 's/(^|[\s_-])([a-z])/$1\u$2/g' -- "$1"
      return
    else
      rename 'y/A-Z/a-z/' -- *
      rename 's/(^|[\s_-])([a-z])/$1\u$2/g' -- *
      return
    fi
  else
    echo "Please, install rename"
    return 1
  fi
}

# Change mkv title to match file name
function mkvtitle() {
  if [[ -f "$(command -v mkvpropedit)" ]]; then
    if [[ "$#" -gt "0" ]]; then
      mkvpropedit "$1" -e info -s title="${f//\.mkv/}"
      return
    else
      for f in *.mkv; do
        mkvpropedit "$f" -e info -s title="${f//\.mkv/}"
      done
      return
    fi
  else
    echo "Please, install mkvtoolnix"
    return 1
  fi
}

# Set Kodi title style on file and folders recursively in the current directory
function toKodi() {
  for folder in *; do
    cd "$folder" || exit 1
    for f in *; do
      filename=${f::-4}
      extension=$(echo "$f" | rev | awk -F '.' '{print $1}' | rev)
      filenb=${f::2}
      filename_length=${#filename}
      Episode="E"

      if [[ "$filename_length" -lt "3" ]]; then
        mv "$f" "$folder$Episode$filename.$extension"
      else
        title=${f:3:-4}
        mv "$f" "$title $folder$Episode$filenb.$extension"
      fi
    done
    cd .. || exit 1
  done
}

### Git
if [[ -f $(command -v git) ]]; then
  # Git Completion
  if [[ "$shell_type" == "bash" ]]; then
    if [[ -f $HOME/bin/git-completion.bash ]]; then
      # shellcheck source=/dev/null
      source "$HOME/bin/git-completion.bash"
    else
      GIT_COMPLETION='https://raw.githubusercontent.com/git/git/master/contrib'
      curl $GIT_COMPLETION/completion/git-completion.bash \
        -o "$HOME/bin/git-completion.bash"
      # shellcheck source=/dev/null
      source "$HOME/bin/git-completion.bash"
    fi
  elif [[ "$shell_type" == "zsh" ]]; then
    if [[ -f $HOME/bin/git-completion.zsh ]]; then
      # shellcheck source=/dev/null
      source "$HOME/bin/git-completion.zsh"
    else
      GIT_COMPLETION='https://raw.githubusercontent.com/git/git/master/contrib'
      curl $GIT_COMPLETION/completion/git-completion.zsh \
        -o "$HOME/bin/git-completion.zsh"
      # shellcheck source=/dev/null
      source "$HOME/bin/git-completion.zsh"
    fi
  fi

  function LastCommitNumber () {
    [[ -d .git ]] && git log --pretty=format:%H -n 1
  }

  function UntouchedSinceALongTimeBranch () {
    [[ -d .git ]] && \
      # Local and Remote branch
      for branch in $(git branch -a | sed 's/\*/ /g' | \
                      awk '{ print $1 }' | grep -E -v -w 'HEAD|master')
      do
        echo -e "$(git show --format="%cr" "$branch" | head -n 1) \
                \t$branch" | grep -E 'month[s]*|year[s]*'
      done | awk '{ print $NF }' | sed 's|origin/||'
  }

  function CleanBranch () {
    [[ -d .git ]] && \
      local branches
      branches=$(git remote prune origin --dry-run | grep 'origin/' | \
                 awk -F '/' '{ print $2 }')
    if [[ -n "$branches" ]]; then
      echo "$branches"
      echo -n "Did you want to clean all this branches (y|N):"
      read -r yn
      case $yn in
        [yY] | [yY][Ee][Ss])
          # Local and Remote branch
          git remote prune origin
          git branch -D "$(for branch in $branches; do
                             printf "%s " "$branch"
                           done;)" 2> /dev/null
          ;;
        *)
          exit 1
          ;;
      esac
    else
      echo "There is no branch to clean."
    fi
  }

  function DeleteUnusedBranch () {
    CleanBranch
    git push origin "$(UntouchedSinceALongTimeBranch)" --delete --dry-run
    echo -n "Did you want to delete all this remote branches (y|N):"
    read -r yn
    case $yn in
      [yY] | [yY][Ee][Ss])
        git push origin "$(UntouchedSinceALongTimeBranch)" --delete
        ;;
      *)
        exit 1
        ;;
    esac
  }

  function GetBackToWork () {
    if [[ -d .git ]]; then
      local last_commit_message=''
      local number_of_commit=''

      last_commit_message="$(git log --pretty=format:%s -n 1)"
      number_of_commit="$(git log --pretty=oneline | wc -l)"

      if [[ "$last_commit_message" =~ .*[wW][iI][pP].* ]]; then
        if [[ "$number_of_commit" -gt 1 ]]; then
          (
            cd "$(git rev-parse --show-toplevel)" && git pull --all
            git reset --soft HEAD~1 && git unstage
          )
        else
          (
            cd "$(git rev-parse --show-toplevel)" && git pull --all
            git update-ref -d HEAD && git unstage
          )
        fi
      else
        echo -e 'The last commit on this branch not contain the magic word (WiP).'
      fi
    else
      echo -e "This folder is not a git repository."
    fi
  }
fi

### Docker & Docker-compose
if [[ -f $(command -v docker) ]]; then
  alias docAllStop='docker stop $(ActiveContainerIds)'
  alias docRedisCli='docker exec -it $(redisContainerId) redis-cli'
  alias docSidekiqLogs='docker logs -f $(sidekiqContainerId)'
  alias restartSidekiqContainer='cId=$(sidekiqContainerId) && docker stop $cId && docker start $cId'

  if [[ -f $(command -v docker-compose) ]]; then
    alias doc='docker-compose '
    alias docDev='doc -f $(find . -iname *dev.yml)'
    alias docDevRun='docdev run --rm '
    alias docDevUp='docdev up'
    alias docRun='doc run --rm '
    alias docUp='doc up'
  fi

  function ActiveContainerIds () {
    docker ps | grep -v CONTAINER | awk 'BEGIN { ORS=" " }; { print $1 }'
  }

  function ActiveContainerNames () {
    docker ps | grep -v CONTAINER | awk 'BEGIN { ORS=" " }; { print $NF }'
  }

  function redisContainerId () {
    docker ps | grep -m 1 redis | awk '{ print $NF }'
  }

  function sidekiqContainerId () {
    docker ps | grep -m 1 sidekiq | awk '{ print $NF }'
  }
fi

### Ruby
# Rubocop
if [[ "$(command -v rubocop)" ]]; then
  # Use available CPUs to execute inspection in parallel
  alias rubocop='rubocop --parallel'
fi

### Heroku
# .heroku_projects example:
#   an heroku app name
#   another heroku app name
#   a third heroku app name
function GetLastCredentials() {
  if [[ -f "$(command -v heroku)" ]]; then
    if heroku --version &> /dev/null; then
      if [[ -f "$HOME/.heroku_projects" ]]; then
        "$HOME/.heroku_projects" | while IFS= read -r heroku_project
        do
          local date
          date=$(date +"%Y%m%d_%H%M%S")
          echo "/tmp/$heroku_project.env"
          heroku config --app "$heroku_project" \
                        --shell > "$HOME/$heroku_project-$date.env"
        done
      else
        echo -e "Please add Heroku Project Name in ~/.heroku_projects.\n\tOne project name per line."
      fi
    fi
  fi
}

### Ledger
if [[ -f $(command -v ledger) ]] && \
   [[ -d $HOME/Documents/Administratif/Banques/ledger ]] && \
   [[ -f "$HOME/.ledgerrc" ]]; then
  function LedgerNewEntry () {
    (
      cd "$HOME/Documents/Administratif/Banques/ledger/" || exit 1
      vim "$(date +"%Y-%m").journal"
    )
  }
  alias ledgerAccountStatus='ledger bal -X JPY'
  alias ledgerCurrentMonthAccountStatus='ledger bal -X JPY --period $(date +"%Y-%m")'
  alias ledgerNewEntry='LedgerNewEntry'
fi

# Flatpak app aliases
flatpak_applications_folder="$HOME/.local/share/flatpak/exports/share/applications"
if [[ -f "$flatpak_applications_folder/fr.handbrake.ghb.desktop" ]]; then
  function handbrake() {
    flatpak run --command=HandBrakeCLI fr.handbrake.ghb
  }
fi
if [[ -f "$flatpak_applications_folder/com.sublimetext.three.desktop" ]]; then
  function sublime() {
    flatpak run com.sublimetext.three "$@"
  }
fi
if [[ -f "$flatpak_applications_folder/org.videolan.VLC" ]]; then
  function vlc() {
    flatpak run org.videolan.VLC "$@"
  }
fi
if [[ -f "$flatpak_applications_folder/org.gimp.GIMP.desktop" ]]; then
  function gimp() {
    flatpak run org.gimp.GIMP "$@"
  }
fi
if [[ -f "$flatpak_applications_folder/org.inkscape.Inkscape.desktop" ]]; then
  function inkscape() {
    flatpak run org.inkscape.Inkscape "$@"
  }
fi
if [[ -f "$flatpak_applications_folder/org.kde.krita.desktop" ]]; then
  function krita() {
    flatpak run org.kde.krita "$@"
  }
fi
if [[ -f "$flatpak_applications_folder/org.mypaint.MyPaint.desktop" ]]; then
  function mypaint() {
    flatpak run org.mypaint.MyPaint "$@"
  }
fi

# Vim folders in case of not using nvim
if [[ ! -f $(command -v nvim) ]] && [[ -f $(command -v vim) ]] ; then
  mkdir -p "$HOME"/.vim/{backup,bundle,spell,swap,undo}
fi

# If no file(s) are passed to vim, check if a Session.vim exist, if yes, run it
function vim_session() {
  local editor
  if [[ -f "Session.vim" ]]; then
    if [[ "$#" -gt 1 ]]; then
      editor=$1
      shift
      $editor "$@"
    else
      editor=$1
      shift
      $editor -S
    fi
  else
    editor=$1
    shift
    $editor "$@"
  fi
}

# Overide Default editor
if [[ -f $(command -v nvim) ]]; then
  alias vim='vim_session nvim'
  if [[ -n "$NVIM_LISTEN_ADDRESS" ]]; then
    if [[ -f $(command -v nvr) ]]; then
      export EDITOR="nvr -cc split --remote-wait +'set bufhidden=wipe'"
    else
      echo -e "Please install neovim-remote by running the following command:\n" \
              "\tFor Fedora:\tsudo dnf install python3-devel && " \
              "pip3 install --user neovim-remote\n" \
              "\tFor Ubuntu:\tsudo apt install python3-dev && " \
              "pip3 install --user neovim-remote"
    fi
  else
    export EDITOR='nvim'
  fi
  if [[ -f "$HOME/.dotfiles/config/nvim/init.vim" ]] && [[ ! -h "$HOME/.config/nvim/init.vim" ]]; then
    if [[ -f $(command -v rcup) ]]; then
      rcup
    fi
  elif [[ -f "$HOME/.dotfiles/config/nvim/init.vim" ]] && [[ -h "$HOME/.config/nvim/init.vim" ]]; then
    alias vimconf='nvim $HOME/.dotfiles/config/nvim/init.vim'
  fi
  if [[ ! -f "$HOME/.local/share/nvim/site/autoload/plug.vim" ]]; then
    echo "Install Plug and all NeoVim plugins"
    curl -fLo "$HOME/.local/share/nvim/site/autoload/plug.vim" --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    nvim +PlugInstall +qall
  fi
elif [[ -f $(command -v vim) ]] && [[ -f "$HOME/.vimrc" ]]; then
  alias vim='vim_session vim'
  alias vimconf='vim $HOME/.vimrc'
  if [[ ! -f "$HOME/.vim/bundle/Vundle.vim" ]]; then
    mkdir -p "$HOME/.vim/bundle"
    echo "Install Vundle and all Vim plugins"
    git clone https://github.com/VundleVim/Vundle.vim.git "$HOME/.vim/bundle/Vundle.vim"
    vim +PluginInstall +qall
  fi
else
  export EDITOR='vi'
fi

# Easy Source shell rc file
if [[ "$shell_type" == "bash" ]]; then
  alias shellrc='source $HOME/.bashrc'
elif [[ "$shell_type" == "zsh" ]]; then
  alias shellrc='source $HOME/.zshrc'
fi

# Create a default Ruby project
# Usage: mkdefault [type] "project name"
#   If [type] not provide, default create only folder and .gitignore
#   TODO implement optional [type]
#     type available: go, rust, c, c++, perl, python, elixir
function mkdefault() {
  local RUBY_VERSION
  local RUBY_BASE_VERSION

  RUBY_VERSION=$(ruby -v | awk '{print $2}' | awk -F 'p' '{print $1}')
  RUBY_BASE_VERSION="${RUBY_VERSION::-1}0"

read -r -d '' HELP << EOF
Usage:
  mkdefault [project_name]

EOF

read -r -d '' GEMFILE_CONTENT << EOF
source "https://rubygems.org"

ruby '~> $RUBY_BASE_VERSION'

group :development, :test do
  gem 'emoji-rspec'
  gem 'pry'
  gem 'reek'
  gem 'rspec'
  gem 'rubocop'
  gem 'rubocop-performance'
end

EOF

read -r -d '' REEK_CONTENT << EOF

EOF

read -r -d '' RSPEC_CONTENT << EOF
--require emoji-rspec --format adventure

EOF

read -r -d '' RUBOCOP_CONTENT << EOF
require:
  - rubocop-performance

EOF

  if [[ "$#" -gt "1" ]]; then
    echo "$HELP"
  elif [[ "$#" -eq "1" ]]; then
    mkdir -p ./"$1"
    (
      cd ./"$1" || return
      echo "$1" > .ruby-gemset
      echo "$GEMFILE_CONTENT" > Gemfile
      echo "$REEK_CONTENT" > .reek.yml
      echo "$RSPEC_CONTENT" > .rspec
      echo "$RUBOCOP_CONTENT" > .rubocop.yml
      echo "$RUBY_VERSION" > .ruby-version
      if [[ "$(command -v mkgitignore)" ]]; then
        if [[ $(grep -c Rails config.ru) -gt "0" ]]; then
          mkgitignore --default -k ruby,rails,node
        else
          mkgitignore --default -k ruby
        fi
      fi
    )
  else
    if [[ ! -f ".ruby-gemset" ]]; then
      basename "$PWD" > .ruby-gemset
    fi
    if [[ ! -f "Gemfile" ]]; then
      echo "$GEMFILE_CONTENT" > Gemfile
    fi
    if [[ ! -f ".reek.yml" ]]; then
      echo "$REEK_CONTENT" > .reek.yml
    fi
    if [[ ! -f ".rspec" ]]; then
      echo "$RSPEC_CONTENT" > .rspec
    fi
    if [[ ! -f ".rubocop.yml" ]]; then
      echo "$RUBOCOP_CONTENT" > .rubocop.yml
      if [[ $(grep -c Rails config.ru) -gt "0" ]]; then
        echo -e "  - rubocop-rails\n\nMetrics/LineLength:\n  Enabled: false\n\nStyle/Documentation:\n  Enabled: false\n\nMetrics/CyclomaticComplexity:\n  Enabled: false\n\nMetrics/MethodLength:\n  Enabled: false\n\nMetrics/PerceivedComplexity:\n  Enabled: false\n\nStyle/IfUnlessModifier:\n  Enabled: false\n\nRails/Present:\n  Enabled: false\n\nMetrics/AbcSize:\n  Enabled: false\n\nStyle/ClassAndModuleChildren:\n  Enabled: false\n\nStyle/NumericLiterals:\n  Enabled: false\n" >> .rubocop.yml
      fi
    else
      if [[ $(grep -c Rails config.ru) -gt "0" ]]; then
        echo -e "  - rubocop-rails\n\nMetrics/LineLength:\n  Enabled: false\n\nStyle/Documentation:\n  Enabled: false\n\nMetrics/CyclomaticComplexity:\n  Enabled: false\n\nMetrics/MethodLength:\n  Enabled: false\n\nMetrics/PerceivedComplexity:\n  Enabled: false\n\nStyle/IfUnlessModifier:\n  Enabled: false\n\nRails/Present:\n  Enabled: false\n\nMetrics/AbcSize:\n  Enabled: false\n\nStyle/ClassAndModuleChildren:\n  Enabled: false\n\nStyle/NumericLiterals:\n  Enabled: false\n" >> .rubocop.yml
      fi
    fi
    if [[ ! -f ".ruby-version" ]]; then
      echo "$RUBY_VERSION" > .ruby-version
    fi
    if [[ "$(command -v mkgitignore)" ]]; then
      if [[ $(grep -c Rails config.ru) -gt "0" ]]; then
        mkgitignore --default -k ruby,rails,node
      else
        mkgitignore --default -k ruby
      fi
    fi
  fi
}

### nvm (Node Version Manager)
#### https://github.com/nvm-sh/nvm
if [[ -d "$HOME/.nvm" ]]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
else
  echo "Install NVM"
  export NVM_DIR="$HOME/.nvm" && (
    git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
    cd "$NVM_DIR"
    git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
  ) && \. "$NVM_DIR/nvm.sh"
fi

### gvm (Go Version Manager)
#### https://github.com/moovweb/gvm
if [[ ! -d "/home/sfeuga/.gvm" ]]; then
  bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
else
  [[ -s "/home/sfeuga/.gvm/scripts/gvm" ]] && source "/home/sfeuga/.gvm/scripts/gvm"
fi

### Autodesk Setup
#### Maya
if [[ -d "/usr/autodesk/maya" ]]; then
  export MAYA_LOCATION="/usr/autodesk/maya"
  export PATH="$MAYA_LOCATION/bin:$PATH"
#  MAYA_PLUG_IN_PATH="$MAYA_LOCATION/plug-ins:$MAYA_LOCATION/bin/plug-ins"
#  MAYA_MODULE_PATH="$MAYA_LOCATION/modules"
#  MAYA_SCRIPT_PATH="$MAYA_LOCATION/scripts"
#  XBMLANGPATH="$MAYA_LOCATION/icons"
fi

### SideFX Houdini
if [[ -d "/opt/hfs17.5/" ]] && [[ -d "/usr/lib/sesi" ]]; then
  export PATH="/usr/lib/sesi:$PATH"
  [[ -s "/opt/hfs17.5/" ]] && (cd /opt/hfs17.5/ && source houdini_setup_bash &>/dev/null)
fi

### Headus UVLayout Pro 2.09.04
if [[ -d "$HOME/bin/uvlayout-pro/bin" ]]; then
  export PATH="/home/sfeuga/bin/uvlayout-pro/bin:$PATH"
fi

### TopoGun 2
if [[ -d "$HOME/bin/topogun_2_00_linux" ]]; then
  export PATH="/home/sfeuga/bin/topogun_2_00_linux:$PATH"
fi

### AnimeStudioPro 5.6
if [[ -d "/home/sfeuga/bin/AnimeStudioPro" ]]; then
  export PATH="/home/sfeuga/bin/AnimeStudioPro:$PATH"
fi

##############################################
### Do not put other lines after this code ###
##############################################

# Clean path
clean_path=$(echo "$PATH" | tr -s ':' '\n' | sort -u | tr '\n' ':' | rev | cut -c 2- | rev)
export PATH="$clean_path"
