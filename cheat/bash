# To implement a for loop:
for file in *;
do
    echo $file found;
done

# To implement a case command:
case "$1"
in
    0) echo "zero found";;
    1) echo "one found";;
    2) echo "two found";;
    3*) echo "something beginning with 3 found";;
esac

# Turn on debugging:
set -x

# Turn off debugging:
set +x

# Retrieve N-th piped command exit status
printf 'foo' | fgrep 'foo' | sed 's/foo/bar/'
echo ${PIPESTATUS[0]}  # replace 0 with N

# Lock file:
( set -o noclobber; echo > my.lock ) || echo 'Failed to create lock file'

# To implement an array:
Fruits=('Apple' 'Banana' 'Orange')

# Operations on an array:
Fruits=("${Fruits[@]}" "Watermelon")    # Push
Fruits+=('Watermelon')                  # Also Push
Fruits=( ${Fruits[@]/Ap*/} )            # Remove by regex match
unset Fruits[2]                         # Remove one item
Veggies=("${Fruits[@]}")                # Duplicate
Fruits=("${Fruits[@]}" "${Veggies[@]}") # Concatenate

# Retrieve value in an array:
echo ${Fruits[0]}           # Element #0
echo ${Fruits[@]}           # All elements, space-separated
echo ${#Fruits[@]}          # Number of elements
echo ${#Fruits}             # String length of the 1st element
echo ${#Fruits[3]}          # String length of the Nth element
echo ${Fruits[@]:3:2}       # Range (from position 3, length 2)

# To implement a dictionary:
declare -A Fruits
Fruits[Red]=Cherry
Fruits[Green]=Apple

# Retrieve value in a dictionary:
echo ${Fruits[Red]} # Red's value
echo ${Fruits[@]}   # All values
echo ${!Fruits[@]}  # All keys
echo ${#Fruits[@]}  # Number of elements
unset Fruits[Red]   # Delete Red
